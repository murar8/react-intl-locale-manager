name: ci

env: { CI: true }

on:
  push: { branches: [master] }
  pull_request: { branches: [master] }

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with: { fetch-depth: 0 }

      - name: Setup node
        uses: actions/setup-node@v1.1.0

      - name: Restore node_modules
        uses: actions/cache@v1
        id: node_modules-cache
        with:
          path: node_modules
          key: node_modules-cache-${{ hashFiles('**/yarn.lock') }}
          restore-key: node_modules-cache-

      - name: Get yarn cache directory
        run: echo "::set-output name=dir::$(yarn cache dir)"
        if: "!steps.node_modules-cache.outputs.cache-hit"
        id: yarn-cache-dir

      - name: Restore yarn cache
        uses: actions/cache@v1
        if: "!steps.node_modules-cache.outputs.cache-hit"
        with:
          path: ${{ steps.yarn-cache-dir.outputs.dir }}
          key: yarn-cache

      - name: Install dependencies
        run: yarn --frozen-lockfile
        if: "!steps.node_modules-cache.outputs.cache-hit"

      # - name: Run commitlint
      #   run: yarn commitlint -f ${{ github.event.before }} -t ${{ github.event.after }}

      - name: Run eslint
        run: yarn lint:eslint

      - name: Run prettier
        run: yarn lint:prettier

      - name: Run unit tests
        run: yarn test:unit

      - name: Upload coverage data
        run: bash <(curl -s https://codecov.io/bash)
        env: { CODECOV_TOKEN: 6dd478ba-5e51-498f-9eaf-65e6752f837a }

      - name: Build
        run: yarn ci:build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v1
        with:
          name: build
          path: build

  integration-tests-os:
    needs: [build]

    strategy:
      matrix:
        os:
          - windows-latest
          - macos-latest

    name: integration-tests-${{ matrix.os }}

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v1.1.0

      - name: Restore node_modules
        uses: actions/cache@v1
        id: node_modules-cache
        with:
          path: node_modules
          key: node_modules-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-key: node_modules-cache-${{ runner.os }}-

      - name: Install dependencies
        run: yarn --frozen-lockfile
        if: "!steps.node_modules-cache.outputs.cache-hit"

      - name: Download build artifacts
        uses: actions/download-artifact@v1
        with: { name: build }

      - name: Run integration tests
        run: yarn test:integration

  integration-tests-node:
    needs: [build]

    strategy:
      matrix:
        node:
          - 10
          - 12.x

    name: integration-tests-node-${{ matrix.node }}

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v1.1.0
        with: { version: "${{ matrix.node }}" }

      - name: Restore node_modules
        uses: actions/cache@v1
        id: node_modules-cache
        with:
          path: node_modules
          key: node_modules-cache-${{ hashFiles('**/yarn.lock') }}

      - name: Download build artifacts
        uses: actions/download-artifact@v1
        with: { name: build }

      - name: Run integration tests
        run: yarn test:integration

  release:
    needs:
      - integration-tests-os
      - integration-tests-node

    if: github.event_name == 'push'

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v1

      - name: Setup node
        uses: actions/setup-node@v1

      - name: Download build artifacts
        uses: actions/download-artifact@v1
        with: { name: build }

      - name: Restore node_modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: node_modules-cache-${{ hashFiles('**/yarn.lock') }}

      - name: Build readme
        run: yarn ci:build:readme

      - name: Release
        run: yarn semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
